% function pam_simulation
% parameters:
% p: pulse shape
% N: length of the signal
% dt: time spacing between pulse shape sampling
% Tp: time range of pulse shape (time vector = -Tp : dt : Tp)
% Ts: symbol time
% fc: 1 by 3, carrier frequency in hertz
% sigma: related to noise
% 
% return:
% xn_est: 1 by 3, decoded xn

function [tImp, r, xn_est] = down(p, N, dt, Tp, Ts, fc, sigma, tImp)

    fs = 1/dt; % sampling frequency

    % add noise
    r = y_up + sigma*randn(1,length(y));

    for num = 1: 3

        % down convert 
        y_down = r .* cos(2*pi*fc*tImp) * 2;
        y_rec = lowpass(y_down, 5, fs); % Passing through a low pass filter of frequency 5Hz
    
        % matched filter receiver
        z = conv(y_rec,flip(p));
        z = z(Tp/dt+1 : length(z)-Tp/dt);
        
        % calculate xn_est
        xn_est(num, : ) = zeros(1, N); % initialization
        
        for i = 1:N
            if (z(int64(1+(i-1)*Ts/dt)) > 0)
                xn_est(i) = 1;
            else
                xn_est(i) = -1;
            end
        end

    end

end